{"version":3,"sources":["index.js"],"names":["TILES","number","color","App","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","this","call","state","server_seed","amount","_createClass","key","value","_this2","chain","i","push","crypto","createHash","update","length","digest","React","createElement","className","onChange","e","setState","target","map","seed","index","hash","createHmac","n","parseInt","tile","find","t","style","slice","toUpperCase","Component","rootElement","document","getElementById","ReactDOM","render"],"mappings":"srBAMA,IAAMA,EAAQ,CACZ,CAAEC,OAAQ,EAAGC,MAAO,SACpB,CAAED,OAAQ,GAAIC,MAAO,SACrB,CAAED,OAAQ,EAAGC,MAAO,OACpB,CAAED,OAAQ,GAAIC,MAAO,SACrB,CAAED,OAAQ,EAAGC,MAAO,OACpB,CAAED,OAAQ,EAAGC,MAAO,SACpB,CAAED,OAAQ,EAAGC,MAAO,OACpB,CAAED,OAAQ,EAAGC,MAAO,SACpB,CAAED,OAAQ,EAAGC,MAAO,OACpB,CAAED,OAAQ,GAAIC,MAAO,SACrB,CAAED,OAAQ,EAAGC,MAAO,OACpB,CAAED,OAAQ,GAAIC,MAAO,SACrB,CAAED,OAAQ,EAAGC,MAAO,OACpB,CAAED,OAAQ,GAAIC,MAAO,SACrB,CAAED,OAAQ,EAAGC,MAAO,QAGhBC,EAAG,SAAAC,GAAAC,YAAAF,EAAAC,GAAA,IAAAE,EAAAC,EAAAJ,GACP,SAAAA,EAAYK,GAAO,IAAAC,EAKf,OALeC,YAAAC,KAAAR,IACjBM,EAAAH,EAAAM,KAAAD,KAAMH,IACDK,MAAQ,CACXC,YAAa,GACbC,OAAQ,IACRN,EAgFH,OA/EAO,YAAAb,EAAA,EAAAc,IAAA,SAAAC,MACD,WAKE,IALO,IAAAC,EAAAR,KAGDS,EAAQ,CAACT,KAAKE,MAAMC,aAEjBO,EAAI,EAAGA,EAAIV,KAAKE,MAAME,OAAQM,IACrCD,EAAME,KACJC,IACGC,WAAW,UACXC,OAAOL,EAAMA,EAAMM,OAAS,IAC5BC,OAAO,QAQd,OACEC,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,UAAI,sCACJD,IAAAC,cAAA,SACEX,MAAOP,KAAKE,MAAMC,YAClBiB,SAAU,SAAAC,GAAC,OAAIb,EAAKc,SAAS,CAAEnB,YAAakB,EAAEE,OAAOhB,WAEvDU,IAAAC,cAAA,WACAD,IAAAC,cAAA,WACAD,IAAAC,cAAA,UAAI,gDACJD,IAAAC,cAAA,SACEX,MAAOP,KAAKE,MAAME,OAClBgB,SAAU,SAAAC,GAAC,OAAIb,EAAKc,SAAS,CAAElB,OAAQiB,EAAEE,OAAOhB,WAGlDU,IAAAC,cAAA,WACAD,IAAAC,cAAA,UAAI,iBAEFlB,KAAKE,MAAMC,aAAiD,KAAlCH,KAAKE,MAAMC,YAAYY,OAKjDE,IAAAC,cAAA,aACED,IAAAC,cAAA,aACED,IAAAC,cAAA,UACED,IAAAC,cAAA,UAAI,QACJD,IAAAC,cAAA,UAAI,QACJD,IAAAC,cAAA,UAAI,kCAGRD,IAAAC,cAAA,aACGT,EAAMe,IAAI,SAACC,EAAMC,GAChB,IAAMC,EAAOf,IACVgB,WAAW,SAAUH,GACrBX,OArCb,oEAsCaE,OAAO,OAGJa,EAAIC,SAASH,EAAM,IAAM,GAEzBI,EAAO1C,EAAM2C,KAAK,SAAAC,GAAC,OAAIA,EAAE3C,SAAWuC,IAE1C,OACEZ,IAAAC,cAAA,UACED,IAAAC,cAAA,MAAIgB,MAAO,CAAE3C,MAAOwC,EAAKxC,QACtBwC,EAAKxC,MAAM4C,MAAM,EAAG,GAAGC,cACtBL,EAAKxC,MAAM4C,MAAM,GAAI,IACtBN,GAEHZ,IAAAC,cAAA,UAAKO,GACLR,IAAAC,cAAA,UAAKS,QAhCfV,IAAAC,cAAA,MAAIgB,MAAO,CAAE3C,MAAO,QAAS,sDAyCpCC,EAtFM,CAASyB,IAAMoB,WAyFlBC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAOzB,IAAAC,cAAC1B,EAAG,MAAK8C","file":"static/js/main.57a4a782.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport crypto from \"crypto\";\n\nimport \"./styles.css\";\n\nconst TILES = [\n  { number: 0, color: \"white\" },\n  { number: 11, color: \"black\" },\n  { number: 5, color: \"red\" },\n  { number: 10, color: \"black\" },\n  { number: 6, color: \"red\" },\n  { number: 9, color: \"black\" },\n  { number: 7, color: \"red\" },\n  { number: 8, color: \"black\" },\n  { number: 1, color: \"red\" },\n  { number: 14, color: \"black\" },\n  { number: 2, color: \"red\" },\n  { number: 13, color: \"black\" },\n  { number: 3, color: \"red\" },\n  { number: 12, color: \"black\" },\n  { number: 4, color: \"red\" }\n];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      server_seed: \"\",\n      amount: 10\n    };\n  }\n  render() {\n    // an example with 10 seeds\n\n    const chain = [this.state.server_seed];\n\n    for (let i = 0; i < this.state.amount; i++) {\n      chain.push(\n        crypto\n          .createHash(\"sha256\")\n          .update(chain[chain.length - 1])\n          .digest(\"hex\")\n      );\n    }\n\n    // the hash of bitcoin block 570120 (https://medium.com/@blazedev/blaze-com-double-seeding-event-d3290ef13454)\n    const clientSeed =\n      \"0000000000000000002aeb06364afc13b3c4d52767e8c91db8cdb39d8f71e8dd\";\n\n    return (\n      <div className=\"App\">\n        <h3>Enter the server seed of your game</h3>\n        <input\n          value={this.state.server_seed}\n          onChange={e => this.setState({ server_seed: e.target.value })}\n        />\n        <br />\n        <br />\n        <h3>Enter the # of games to view before this one</h3>\n        <input\n          value={this.state.amount}\n          onChange={e => this.setState({ amount: e.target.value })}\n        />\n\n        <hr />\n        <h1>Double rolls:</h1>\n\n        {!this.state.server_seed || this.state.server_seed.length !== 64 ? (\n          <h3 style={{ color: \"red\" }}>\n            Please enter a server seed to view this table\n          </h3>\n        ) : (\n          <table>\n            <thead>\n              <tr>\n                <th>Roll</th>\n                <th>Seed</th>\n                <th>Hash (hmac with client seed)</th>\n              </tr>\n            </thead>\n            <tbody>\n              {chain.map((seed, index) => {\n                const hash = crypto\n                  .createHmac(\"sha256\", seed)\n                  .update(clientSeed)\n                  .digest(\"hex\");\n\n                // roulette number from 0-15\n                const n = parseInt(hash, 16) % 15;\n\n                const tile = TILES.find(t => t.number === n);\n\n                return (\n                  <tr>\n                    <td style={{ color: tile.color }}>\n                      {tile.color.slice(0, 1).toUpperCase() +\n                        tile.color.slice(1)}{\" \"}\n                      {n}\n                    </td>\n                    <td>{seed}</td>\n                    <td>{hash}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        )}\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}